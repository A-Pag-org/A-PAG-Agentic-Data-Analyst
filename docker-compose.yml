version: '3.8'

services:
  # PostgreSQL with pgvector extension
  postgres:
    image: ankane/pgvector:latest
    container_name: rag_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: rag_data_analyst
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rag_network

  # ChromaDB for vector storage
  chromadb:
    image: chromadb/chroma:latest
    container_name: rag_chromadb
    ports:
      - "8001:8000"
    volumes:
      - chroma_data:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
      - ANONYMIZED_TELEMETRY=FALSE
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - rag_network

  # Backend API (optional - for containerized development)
  # Uncomment if you want to run backend in Docker
  # backend:
  #   build:
  #     context: ./backend
  #     dockerfile: ../docker/Dockerfile.backend
  #   container_name: rag_backend
  #   ports:
  #     - "8000:8000"
  #   environment:
  #     - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres:5432/rag_data_analyst
  #     - CHROMA_HOST=chromadb
  #     - CHROMA_PORT=8000
  #   env_file:
  #     - ./backend/.env
  #   volumes:
  #     - ./backend:/app
  #     - backend_uploads:/app/uploads
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     chromadb:
  #       condition: service_healthy
  #   networks:
  #     - rag_network

  # Frontend (optional - for containerized development)
  # Uncomment if you want to run frontend in Docker
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: ../docker/Dockerfile.frontend
  #   container_name: rag_frontend
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - NEXT_PUBLIC_API_URL=http://localhost:8000
  #   env_file:
  #     - ./frontend/.env
  #   volumes:
  #     - ./frontend:/app
  #     - /app/node_modules
  #     - /app/.next
  #   depends_on:
  #     - backend
  #   networks:
  #     - rag_network

volumes:
  postgres_data:
  chroma_data:
  backend_uploads:

networks:
  rag_network:
    driver: bridge